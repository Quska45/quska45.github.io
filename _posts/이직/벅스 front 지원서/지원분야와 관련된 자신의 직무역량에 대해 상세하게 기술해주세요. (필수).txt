* 자바스크립트에 대한 이해, 자바스크립트를 통해 구현한 OOP
R&D 부서에 있으면서 html canvas를 기반으로한 2D 솔루션의 애니메이션 기능을 추가하고 이를 기반으로 데모 서비스를 개발하는 업무를 맡았습니다.
데모의 목표는 냉장고 조립에 대한 실제 공정을 2D 애니메이션으로 구현해 내는 것 이었습니다.
작업자, 컨베이어, 냉장고, 작업기계 등의 객체가 필요했고 각 객체들은 속성에 맞는 세분화가 필요했습니다.
객체별 예시는 다음과 같습니다.
  - 컨베이어 ex : 상/하/좌/우/코너링 컨베이어
  - 작업기 ex : 스티로폼 포장기, 박스 포장기, 버퍼
위와 같이 복잡한 객체들을 구현해야 하는 과제 였습니다.
웹팩을 사용하여 class를 비롯한 모듈 export/import를 사용할 수 있었다면 한결 편했겠지만 개발 당시에는 웹팩에 대한 지식이 없어 빠르게 결정하지 못했습니다.
따라서 웹팩에 대한 러닝커브를 고려해 일정 상 기존에 어느정도 지식을 가지고 있던 prototype을 이용하여 OOP를 통해 데모를 구현하는 것으로 결정했습니다.
먼저 데모에서 객체라면 필수적으로 가지고 있어야할 속성들을 인터페이스의 개념으로 정의 했습니다.
객체 공통 요소를 기반으로한 인터페이스를 가지고 각 객체의 원형에 대한 인터페이스를 설계하고, prototype을 이용해 상속을 흉내내어 속성별 객체를 구현 해냈습니다.
모듈을 사용하지 않았기 때문에 객체별로 파일을 분리하여 가독성을 확보하고, 즉시실행함수를 이용해 컨텍스트를 제한하여 필요한 객체만을 리턴해줬습니다.
이런 과정을 통해 자바스크립트라는 언어에 대해 더 깊이 이해할 수 있게 됐던 것 같습니다.
또 복잡한 업무를 구현해내기 위해 OOP가 얼마나 강력한 개념인지도 느낄 수 있었습니다.

* 웹팩 빌드 속도 최적화에 대한 경험
2022년에 node와 vue를 쓰는 시스템으로 넘어오면서 웹팩을 사용하면서 많은 것들을 배우고 있습니다.
이 때 웹팩에 대해서 깊게 공부했던 계기는 프로젝트의 빌드 속도에 대한 이슈 때문이었습니다.
빌드에 3-4분 가량의 시간이 소요 된다는 점이었습니다.
프로젝트의 규모가 아무리 크다지만, 이건 문제가 있다는 생각이 들었습니다.
개발 시에 아주 작은 코드의 변경사항 만으로도 매번 시간을 허비해야 하니 참 답답 했습니다.
이를 개선하기 위해 모듈 번들링에 대한 분석기, 속도 측정 도구 들을 이용하며 현재 프로젝트의 빌드가 어떻게 되고 있는지 파악했습니다.
웹팩 설정을 분석 하며 코드 스플릿은 어떻게 되어 있는지도 확인 했습니다.
결과적으로 디버깅을 위한 source map을 생성하는 옵션을 변경하여 빌드 시간을 5-20초로 줄일 수 있었습니다.

* vue, react에 대한 경험
2022년에 vue를 쓰는 시스템으로 넘어오면서 실제 프로덕션 레벨에 있는 최신 자바스크립트에 대한 많은 것을 배우고 있습니다.
데이터의 변경에 대해 직접 처리했던 jquery에서 데이터 관리에 중점을 둔 vue로 넘어 오면서 무엇이 다른지 많은 것을 직접 느끼고 있습니다.
기존에 개발된 시스템을 운영하는 업무다 보니 제가 직접 설정과 관련된 부분을 건드릴 일은 없었지만 얼마나 많은 노력이 들어가야 하는지 느꼈습니다.
그래서 개인 프로젝트를 통해 nuxtjs를 이용해 봤습니다.
nuxtjs가 제공하는 파일 구조는 page, api, component 등을 정해진 구조대로 나눠 주고 개발자는 개발만 하면 되기 때문에 정말 편리했습니다.
코드 스플릿 처럼 vue-cli에서는 개발자가 직접 해줘야 했던 것들을 자동으로 해주는 것 또한 인상 깊었습니다.
nuxtjs를 통해 개발한 개인 프로젝트는 CSR을 이용해 SPA로 개발했습니다.
그래서 이번엔 nextjs를 이용해 react와 SSR에 대해서 공부했습니다.
vue와 유사한 듯 다른 react 였기 때문에 적응하는데 큰 어려움은 없었습니다.
이제는 일반화된 vue, react로 개발하는데 큰 문제는 없을 것 같다는 자신감도 얻게 됐습니다.

* 스프링 부트를 이용한 외부 데이터 제공 API 개발
현재 운영중인 시스템이 새로운 외부 모바일 시스템과 데이터 연계가 필요하여 10개 정도의 API를 개발했습니다.
이전에 비슷한 경험이 있기는 했지만, 이번에는 제가 관리자 및 메인 개발자로서 필요한 것들을 챙겨야 한다는 점에 있어서 큰 의미가 있었습니다.
모바일 개발자, 데이터 중계 시스템 관리자 들과 협업하며 일을 진행했습니다.
방화벽과 같은 환경적인 문제부터, 주고 받는 데이터의 스키마를 정하는 일 까지 여러가지에 대한 경험을 할 수 있었습니다.
개발과정에서 큰 어려움을 느낀점은 딱히 없지만 그 중에 가장 기억에 남는 것은 예외 처리와 관련된 부분을 개발한 것입니다.
기존에 개발된 예외 처리 기능으로는 요구사항을 수용할 수 없어 새로운 예외 핸들러를 만들고 작동하게 했습니다.
이 과정에서 예외를 올바르게 처리하는 것과 spring boot에 대해서도 더 이해할 수 있는 계기가 됐습니다.
